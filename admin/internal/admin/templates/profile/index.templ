package profile

import (
	"strings"
	"time"

	profilemodel "finitefield.org/hanko-admin/internal/admin/profile"
	"finitefield.org/hanko-admin/internal/admin/templates/components"
	"finitefield.org/hanko-admin/internal/admin/templates/helpers"
	"finitefield.org/hanko-admin/internal/admin/templates/layouts"
)

templ Index(data PageData) {
	if strings.TrimSpace(data.DisplayName) == "" {
		data.DisplayName = data.UserName
	}
	if data.UserEmail == "" && data.Security != nil && data.Security.UserEmail != "" {
		data.UserEmail = data.Security.UserEmail
	}
	if data.ActiveTab == "" {
		data.ActiveTab = "security"
	}
	@layouts.Base(helpers.I18N("admin.profile.title"), breadcrumbItems(), pageBody(data))
}

templ pageBody(data PageData) {
	<div class="space-y-8">
		@pageHeader(data)
		<div class="grid gap-6 xl:grid-cols-[minmax(0,1fr)_20rem]">
			<div class="flex flex-col gap-6">
				@profileSummaryCard(data)
				<div id="profile-flash">
					if data.Flash != "" {
						@flashMessage(data.Flash)
					}
				</div>
				@ProfileTabs(data)
			</div>
			<aside class="space-y-4">
				@supportPanel()
				<div class="space-y-4">
					for _, alert := range securityAlerts() {
						@alertCard(alert)
					}
				</div>
			</aside>
		</div>
	</div>
}

templ pageHeader(data PageData) {
	<header class="rounded-2xl bg-white px-6 py-6 shadow-sm ring-1 ring-slate-200">
		<div class="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
			<div class="flex items-center gap-4">
				<div class="flex h-16 w-16 items-center justify-center rounded-full bg-indigo-100 text-2xl font-semibold text-indigo-700">
					{ AvatarInitial(data.DisplayName, data.UserEmail, data.UserName) }
				</div>
				<div>
					<h1 class="text-2xl font-semibold text-slate-900">{ data.DisplayName }</h1>
					if data.UserEmail != "" {
						<p class="text-sm text-slate-600">{ data.UserEmail }</p>
					}
					if data.Security != nil && !data.Security.UpdatedAt.IsZero() {
						<p class="mt-1 text-xs text-slate-400">最終更新 { formatTimestamp(data.Security.UpdatedAt) }</p>
					}
				</div>
			</div>
			<div class="flex flex-wrap items-center gap-2">
				if len(data.Roles) == 0 {
					@components.Badge("ロール未設定", "warning")
				} else {
					for _, role := range data.Roles {
						@components.Badge(role, "info")
					}
				}
			</div>
		</div>
	</header>
}

templ profileSummaryCard(data PageData) {
	<section class="rounded-2xl bg-white px-6 py-6 shadow-sm ring-1 ring-slate-200">
		<div class="flex flex-col gap-4 sm:flex-row sm:items-start sm:justify-between">
			<div>
				<h2 class="text-base font-semibold text-slate-900">プロフィール概要</h2>
				<p class="mt-2 text-sm text-slate-600">連絡先、MFA、API キーなどのセキュリティ状況を確認できます。</p>
			</div>
			@components.ButtonWith("Firebase Console を開く", components.ButtonOptions{
				Variant: "secondary",
				Size:    "sm",
				Href:    "https://console.firebase.google.com/",
				Attrs: templ.Attributes{
					"target": "_blank",
					"rel":    "noreferrer",
				},
			})
		</div>
		<dl class="mt-6 grid grid-cols-1 gap-4 text-sm text-slate-600 sm:grid-cols-2 lg:grid-cols-3">
			<div>
				<dt class="font-medium text-slate-500">メールアドレス</dt>
				<dd class="mt-1 font-semibold text-slate-900">
					if data.UserEmail != "" {
						{ data.UserEmail }
					} else {
						<span class="text-slate-400">未登録</span>
					}
				</dd>
			</div>
			<div>
				<dt class="font-medium text-slate-500">ユーザー ID</dt>
				<dd class="mt-1 font-mono text-slate-900">{ data.UserName }</dd>
			</div>
			if data.Security != nil && data.Security.Phone != "" {
				<div>
					<dt class="font-medium text-slate-500">電話番号</dt>
					<dd class="mt-1 text-slate-900">{ data.Security.Phone }</dd>
				</div>
			}
			<div>
				<dt class="font-medium text-slate-500">最終ログイン</dt>
				<dd class="mt-1 text-slate-900">
					if data.LastLogin != nil {
						{ formatTimestamp(*data.LastLogin) }
					} else {
						<span class="text-slate-400">記録なし</span>
					}
				</dd>
			</div>
			if data.Security != nil {
				<div>
					<dt class="font-medium text-slate-500">MFA</dt>
					<dd class="mt-1">
						if data.Security.MFA.Enabled {
							@components.Badge("有効", "success")
						} else {
							@components.Badge("未設定", "muted")
						}
					</dd>
				</div>
				<div>
					<dt class="font-medium text-slate-500">API キー</dt>
					<dd class="mt-1 text-slate-900">{ len(data.Security.APIKeys) } 件</dd>
				</div>
			}
		</dl>
	</section>
}

templ supportPanel() {
	<section class="rounded-2xl border border-slate-200 bg-white px-5 py-5 shadow-sm">
		<h2 class="text-base font-semibold text-slate-900">セキュリティ運用</h2>
		<p class="mt-2 text-sm text-slate-600">疑問やインシデントが発生した場合は、以下のリソースからガイドラインを参照してください。</p>
		<ul class="mt-4 space-y-3 text-sm">
			<li>
				<a
					href="https://cloud.google.com/security/best-practices-for-enterprises"
					target="_blank"
					rel="noreferrer"
					class="inline-flex items-center gap-2 font-medium text-indigo-600 hover:text-indigo-500"
				>
					Google Cloud セキュリティガイド
				</a>
			</li>
			<li>
				<a
					href="mailto:security@hanko-field.dev"
					class="inline-flex items-center gap-2 font-medium text-indigo-600 hover:text-indigo-500"
				>
					security@hanko-field.dev
				</a>
			</li>
		</ul>
	</section>
}

templ ProfileTabs(data PageData) {
	<div id="profile-tabs" class="space-y-4">
		@profileTabsInner(data)
	</div>
}

templ profileTabsInner(data PageData) {
	@components.UnderlineTabs(components.UnderlineTabsProps{
		Tabs: []components.UnderlineTab{
			{ID: "account", Label: "アカウント", Href: "/admin/profile?tab=account", Active: data.ActiveTab == "account"},
			{ID: "security", Label: "セキュリティ", Href: "/admin/profile?tab=security", Active: data.ActiveTab == "security"},
			{ID: "sessions", Label: "セッション", Href: "/admin/profile?tab=sessions", Active: data.ActiveTab == "sessions"},
			{ID: "flags", Label: "機能フラグ", Href: "/admin/profile?tab=flags", Active: data.ActiveTab == "flags"},
		},
		HxTarget:  "#profile-tabs",
		HxSwap:    "outerHTML",
		HxPushURL: true,
	})
	<div class="rounded-2xl border border-slate-200 bg-white shadow-sm">
		<div class="space-y-6 px-6 py-6">
			if data.ActiveTab == "account" {
				@accountTab(data)
			} else if data.ActiveTab == "sessions" {
				@sessionsTab(data)
			} else if data.ActiveTab == "flags" {
				@featureFlagsTab(data)
			} else {
				@securityTab(data)
			}
		</div>
	</div>
}

templ accountTab(data PageData) {
	<div class="space-y-6">
		<section class="space-y-3">
			<h3 class="text-sm font-semibold uppercase tracking-wide text-slate-500">連絡先</h3>
			<p class="text-sm text-slate-600">スタッフプロフィールは Firebase Auth を信頼ソースとして同期されています。</p>
			<dl class="grid grid-cols-1 gap-4 text-sm text-slate-600 sm:grid-cols-2">
				<div>
					<dt class="font-medium text-slate-500">表示名</dt>
					<dd class="mt-1 text-slate-900">{ data.DisplayName }</dd>
				</div>
				<div>
					<dt class="font-medium text-slate-500">メールアドレス</dt>
					<dd class="mt-1">
						if data.UserEmail != "" {
							{ data.UserEmail }
						} else {
							<span class="text-slate-400">未登録</span>
						}
					</dd>
				</div>
				if data.Security != nil && data.Security.Phone != "" {
					<div>
						<dt class="font-medium text-slate-500">電話番号</dt>
						<dd class="mt-1 text-slate-900">{ data.Security.Phone }</dd>
					</div>
				}
				<div>
					<dt class="font-medium text-slate-500">所属ロール</dt>
					<dd class="mt-1 flex flex-wrap gap-2">
						if len(data.Roles) == 0 {
							<span class="text-slate-400">割り当てなし</span>
						} else {
							for _, role := range data.Roles {
								@components.Badge(role, "info")
							}
						}
					</dd>
				</div>
			</dl>
		</section>
		<section class="space-y-3">
			<h3 class="text-sm font-semibold uppercase tracking-wide text-slate-500">パスワード管理</h3>
			<p class="text-sm text-slate-600">Hanko Admin は Firebase Auth を利用しており、パスワードの変更は認証プロバイダで実施します。</p>
			<div class="rounded-xl border border-dashed border-slate-300 bg-slate-50 px-4 py-4 text-sm text-slate-600">
				<p>Firebase Console → Authentication → Users からユーザーを選択し、"Reset password" を実行してください。</p>
				<div class="mt-3">
					@components.ButtonWith("Firebase Console を開く", components.ButtonOptions{
						Variant: "secondary",
						Size:    "sm",
						Href:    "https://console.firebase.google.com/project/_/authentication/users",
						Attrs: templ.Attributes{
							"target": "_blank",
							"rel":    "noreferrer",
						},
					})
				</div>
			</div>
		</section>
	</div>
}

templ securityTab(data PageData) {
	<div class="space-y-6">
		<p class="text-sm text-slate-600">Authenticator アプリやメールによる MFA を有効化し、API キーは最小権限で管理してください。</p>
		<section id="mfa-card">
			@mfaCard(data.Security, data.CSRFToken)
		</section>
		<section id="api-keys-card">
			@apiKeysCard(data.Security, data.CSRFToken)
		</section>
	</div>
}

templ sessionsTab(data PageData) {
	<div class="space-y-4">
		<section id="sessions-card">
			@sessionsCard(data.Security, data.CSRFToken)
		</section>
		<p class="text-xs text-slate-500">すべてのセッションを失効すると、次回ログイン時に MFA が再認証されます。</p>
	</div>
}

templ featureFlagsTab(data PageData) {
	<div class="space-y-4">
		<p class="text-sm text-slate-600">機能フラグは段階的リリースや運用中の実験機能のトグルに使用されます。</p>
		if len(data.FeatureFlags) == 0 {
			<p class="rounded-lg border border-dashed border-slate-300 px-4 py-4 text-sm text-slate-500">割り当てられた機能フラグはありません。</p>
		} else {
			<div class="overflow-hidden rounded-xl border border-slate-200 bg-white">
				<table class="min-w-full divide-y divide-slate-200 text-sm">
					<thead class="bg-slate-50 text-xs uppercase text-slate-500">
						<tr>
							<th class="px-4 py-3 text-left font-medium">キー</th>
							<th class="px-4 py-3 text-left font-medium">状態</th>
						</tr>
					</thead>
					<tbody class="divide-y divide-slate-200">
						for _, flag := range data.FeatureFlags {
							<tr>
								<td class="px-4 py-3 font-mono text-slate-900">{ flag.Key }</td>
								<td class="px-4 py-3">
									if flag.Enabled {
										@components.Badge("有効", "success")
									} else {
										@components.Badge("無効", "muted")
									}
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
	</div>
}

templ flashMessage(message string) {
	<div class="rounded-lg border border-sky-200 bg-sky-50 px-4 py-3 text-sm text-sky-900 shadow-sm">
		{ message }
	</div>
}

templ alertCard(alert AlertContent) {
	<div class="rounded-2xl border border-slate-200 bg-white px-5 py-4 shadow-sm">
		<h2 class="text-base font-semibold text-slate-900">{ alert.Title }</h2>
		<p class="mt-2 text-sm text-slate-600">{ alert.Body }</p>
		if alert.LinkHref != "" && alert.LinkText != "" {
			<a
				href={ alert.LinkHref }
				target="_blank"
				rel="noreferrer"
				class="mt-3 inline-flex items-center text-sm font-medium text-indigo-600 hover:text-indigo-500"
			>
				{ alert.LinkText } →
			</a>
		}
	</div>
}

templ mfaCard(state *profilemodel.SecurityState, csrf string) {
	@components.Card("多要素認証 (MFA)", mfaCardBody(state, csrf))
}

templ mfaCardBody(state *profilemodel.SecurityState, csrf string) {
	if state == nil {
		<p class="text-sm text-slate-500">MFA 情報を取得できませんでした。</p>
		return
	}
	<section class="space-y-5">
		<div class="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
			<div class="flex items-center gap-3">
				if state.MFA.Enabled {
					@components.Badge("有効", "success")
				} else {
					@components.Badge("無効", "muted")
				}
				if state.MFA.LastConfirmed != nil {
					<span class="text-sm text-slate-600">最終確認: { formatTimestamp(*state.MFA.LastConfirmed) }</span>
				}
			</div>
			@components.ButtonWith("Authenticator を追加", components.ButtonOptions{
				Variant: "primary",
				Attrs: templ.Attributes{
					"hx-get":   "/admin/profile/mfa/totp",
					"hx-target": "#modal",
					"hx-swap": "innerHTML",
				},
			})
		</div>

		<div class="rounded-xl border border-slate-200 bg-slate-50 px-4 py-4">
			<h3 class="text-sm font-semibold text-slate-800">登録済み要素</h3>
			if len(state.MFA.Methods) == 0 {
				<p class="mt-2 text-sm text-slate-600">まだ MFA 要素が登録されていません。Authenticator アプリかメール認証を設定してください。</p>
			} else {
				<ul class="mt-3 space-y-3">
					for _, method := range state.MFA.Methods {
						<li class="flex flex-col gap-1 rounded-lg border border-slate-200 bg-white px-4 py-3 text-sm text-slate-700 md:flex-row md:items-center md:justify-between">
							<div>
								<span class="font-semibold text-slate-900">{ method.Label }</span>
								<span class="ml-2 text-xs uppercase text-slate-500">{ string(method.Kind) }</span>
								if method.Default {
									@components.Badge("Primary", "info")
								}
							</div>
							<div class="text-xs text-slate-500 md:text-right">
								<p>登録: { formatTimestamp(method.CreatedAt) }</p>
								if method.LastUsedAt != nil {
									<p>最終利用: { formatTimestamp(*method.LastUsedAt) }</p>
								}
							</div>
						</li>
					}
				</ul>
			}
			if len(state.MFA.RecoveryCodes) > 0 {
				<p class="mt-3 text-xs text-slate-500">復旧コード: { len(state.MFA.RecoveryCodes) } 件</p>
			}
		</div>

		<div class="flex flex-wrap gap-3">
			if !hasMFAMethod(state, profilemodel.MFAMethodEmail) {
				<form
					hx-post="/admin/profile/mfa/email"
					hx-target="#mfa-card"
					hx-swap="outerHTML"
				>
					<input type="hidden" name="csrf_token" value={ csrf } />
					@components.ButtonWith("メールコードを有効化", components.ButtonOptions{
						Type:    "submit",
						Variant: "secondary",
					})
				</form>
			}
			if state.MFA.Enabled {
				<form
					hx-post="/admin/profile/mfa/disable"
					hx-target="#mfa-card"
					hx-swap="outerHTML"
					class="inline"
				>
					<input type="hidden" name="csrf_token" value={ csrf } />
					@components.ButtonWith("MFA を無効化", components.ButtonOptions{
						Type:    "submit",
						Variant: "danger",
					})
				</form>
			}
		</div>
	</section>
}

templ apiKeysCard(state *profilemodel.SecurityState, csrf string) {
	@components.Card("API キー", apiKeysBody(state, csrf))
}

templ apiKeysBody(state *profilemodel.SecurityState, csrf string) {
	<div class="space-y-4">
		<div class="flex flex-wrap items-center justify-between gap-3">
			<p class="text-sm text-slate-600">バックエンド連携や自動化のためのキー。シークレットは発行直後のみ表示されます。</p>
			@components.ButtonWith("新しいキーを発行", components.ButtonOptions{
				Variant: "primary",
				Attrs: templ.Attributes{
					"hx-get":   "/admin/profile/api-keys/new",
					"hx-target": "#modal",
					"hx-swap": "innerHTML",
				},
			})
		</div>

		if state == nil || len(state.APIKeys) == 0 {
			<p class="rounded-lg border border-dashed border-slate-300 px-4 py-4 text-sm text-slate-500">API キーはまだ発行されていません。</p>
		} else {
			<div class="overflow-hidden rounded-xl border border-slate-200">
				<table class="min-w-full divide-y divide-slate-200 text-sm">
					<thead class="bg-slate-50 text-xs uppercase text-slate-500">
						<tr>
							<th class="px-4 py-3 text-left font-medium">ラベル</th>
							<th class="px-4 py-3 text-left font-medium">状態</th>
							<th class="px-4 py-3 text-left font-medium">最終利用</th>
							<th class="px-4 py-3 text-left font-medium">操作</th>
						</tr>
					</thead>
					<tbody class="divide-y divide-slate-200 bg-white">
						for _, key := range state.APIKeys {
							<tr>
								<td class="px-4 py-3">
									<div class="font-semibold text-slate-900">{ key.Label }</div>
									<div class="text-xs text-slate-500">作成: { formatTimestamp(key.CreatedAt) }</div>
									if key.ExpiresAt != nil {
										<div class="text-xs text-amber-600">期限: { formatTimestamp(*key.ExpiresAt) }</div>
									}
								</td>
								<td class="px-4 py-3">
									if key.Status == profilemodel.APIKeyStatusActive {
										@components.Badge("有効", "success")
									} else if key.Status == profilemodel.APIKeyStatusExpired {
										@components.Badge("期限切れ", "warning")
									} else {
										@components.Badge("失効", "muted")
									}
								</td>
								<td class="px-4 py-3 text-slate-600">{ formatOptionalTime(key.LastUsed) }</td>
								<td class="px-4 py-3">
									if key.Status == profilemodel.APIKeyStatusActive {
										<form
											hx-post={ "/admin/profile/api-keys/" + key.ID + "/revoke" }
											hx-target="#api-keys-card"
											hx-swap="outerHTML"
											class="inline-flex"
										>
											<input type="hidden" name="csrf_token" value={ csrf } />
											@components.ButtonWith("失効", components.ButtonOptions{
												Type:    "submit",
												Variant: "danger",
												Size:    "sm",
											})
										</form>
									} else {
										<span class="text-xs text-slate-400">操作なし</span>
									}
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
	</div>
}

templ sessionsCard(state *profilemodel.SecurityState, csrf string) {
	@components.Card("アクティブセッション", sessionsBody(state, csrf))
}

templ sessionsBody(state *profilemodel.SecurityState, csrf string) {
	<div class="space-y-4">
		<p class="text-sm text-slate-600">現在ログイン中のブラウザとデバイス。見覚えのないセッションは直ちに失効してください。</p>
		if state == nil || len(state.Sessions) == 0 {
			<p class="rounded-lg border border-dashed border-slate-300 px-4 py-4 text-sm text-slate-500">アクティブなセッションはありません。</p>
		} else {
			<div class="overflow-hidden rounded-xl border border-slate-200">
				<table class="min-w-full divide-y divide-slate-200 text-sm">
					<thead class="bg-slate-50 text-xs uppercase text-slate-500">
						<tr>
							<th class="px-4 py-3 text-left font-medium">デバイス</th>
							<th class="px-4 py-3 text-left font-medium">IP / 場所</th>
							<th class="px-4 py-3 text-left font-medium">更新</th>
							<th class="px-4 py-3 text-left font-medium">操作</th>
						</tr>
					</thead>
					<tbody class="divide-y divide-slate-200 bg-white">
						for _, session := range state.Sessions {
							<tr>
								<td class="px-4 py-3">
									<div class="font-semibold text-slate-900">{ session.UserAgent }</div>
									<div class="text-xs text-slate-500">開始: { formatTimestamp(session.CreatedAt) }</div>
									if session.Current {
										@components.Badge("現在", "info")
									}
								</td>
								<td class="px-4 py-3 text-slate-600">
									<p>{ session.IPAddress }</p>
									if session.Location != "" {
										<p class="text-xs text-slate-500">{ session.Location }</p>
									}
								</td>
								<td class="px-4 py-3 text-slate-600">{ formatTimestamp(session.LastSeenAt) }</td>
								<td class="px-4 py-3">
									if !session.Current {
										<form
											hx-post={ "/admin/profile/sessions/" + session.ID + "/revoke" }
											hx-target="#sessions-card"
											hx-swap="outerHTML"
											class="inline-flex"
										>
											<input type="hidden" name="csrf_token" value={ csrf } />
											@components.ButtonWith("失効", components.ButtonOptions{
												Type:    "submit",
												Variant: "danger",
												Size:    "sm",
											})
										</form>
									} else {
										<span class="text-xs text-slate-400">現在のセッション</span>
									}
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
	</div>
}

templ TOTPModal(data TOTPModalData) {
	@layouts.Modal("Authenticator を設定", totpModalBody(data))
}

templ totpModalBody(data TOTPModalData) {
	if data.Enrollment == nil {
		<p class="text-sm text-slate-600">MFA 登録情報を取得できませんでした。しばらくしてから再試行してください。</p>
		return
	}
	<div class="space-y-4 text-sm text-slate-700">
		<p>Authenticator アプリ (Google Authenticator、1Password など) で QR コードを読み取り、表示された 6 桁コードを入力してください。</p>
		if data.Enrollment.QRCodePNG != "" {
			<img src={ data.Enrollment.QRCodePNG } alt="QRコード" class="mx-auto h-44 w-44 rounded-lg border border-slate-200" />
		}
		<div class="rounded-lg border border-slate-200 bg-slate-50 px-3 py-2 font-mono text-sm">
			{ data.Enrollment.Secret }
		</div>
		<form
			hx-post="/admin/profile/mfa/totp"
			hx-target="#modal"
			hx-swap="innerHTML"
			class="space-y-3"
		>
			<input type="hidden" name="csrf_token" value={ data.CSRFToken } />
			@components.TextInput(components.TextInputProps{
				ID:        "code",
				Name:      "code",
				Label:     "6 桁コード",
				Placeholder: "123456",
				Required:  true,
				AutoFocus: true,
			})
			if data.Error != "" {
				<p class="text-sm text-rose-600">{ data.Error }</p>
			}
			@components.ButtonWith("有効化する", components.ButtonOptions{Type: "submit", FullWidth: true})
		</form>
		<p class="text-xs text-slate-500">復旧コードを安全な場所に保管し、デバイス喪失時に備えてください。</p>
	</div>
}

templ APIKeyFormModal(data APIKeyFormData) {
	@layouts.Modal("API キーを発行", apiKeyFormBody(data))
}

templ apiKeyFormBody(data APIKeyFormData) {
	<form
		hx-post="/admin/profile/api-keys"
		hx-target="#modal"
		hx-swap="innerHTML"
		class="space-y-4"
	>
		<input type="hidden" name="csrf_token" value={ data.CSRFToken } />
		@components.TextInput(components.TextInputProps{
			ID:        "label",
			Name:      "label",
			Label:     "ラベル",
			Placeholder: "例: Zapier Integration",
			Required:  true,
			Value:     data.Label,
		})
		if data.Error != "" {
			<p class="text-sm text-rose-600">{ data.Error }</p>
		}
		@components.ButtonWith("キーを発行", components.ButtonOptions{
			Type:     "submit",
			FullWidth: true,
		})
	</form>
	<p class="mt-3 text-xs text-slate-500">※ キーは暗号化して保存されるため、シークレットはこの画面でのみ表示されます。</p>
}

templ APIKeySecretModal(secret *profilemodel.APIKeySecret, message string) {
	if secret == nil {
		return
	}
	@layouts.Modal("API キー発行", apiKeySecretBody(secret, message))
}

templ apiKeySecretBody(secret *profilemodel.APIKeySecret, message string) {
	<div class="space-y-4 text-sm text-slate-700">
		if message != "" {
			<p class="rounded-lg border border-sky-200 bg-sky-50 px-3 py-2 text-sky-900">{ message }</p>
		}
		<div>
			<h3 class="text-sm font-semibold text-slate-800">シークレット</h3>
			<p class="mt-2 rounded-lg border border-slate-200 bg-slate-50 px-3 py-2 font-mono text-sm">{ secret.Secret }</p>
		</div>
		<p class="text-xs text-slate-500">シークレットはコピーして安全な場所に保管してください。</p>
		<button
			type="button"
			class="w-full rounded-lg border border-slate-300 px-4 py-2 text-sm text-slate-600 hover:bg-slate-100"
			data-modal-close
		>閉じる</button>
	</div>
}

templ MFAUpdate(data MFAUpdateData) {
	if data.Security != nil {
		<div id="mfa-card" hx-swap-oob="true">
			@mfaCard(data.Security, data.CSRFToken)
		</div>
	}
	<div
		id="modal"
		class="modal hidden"
		hx-swap-oob="true"
		aria-hidden="true"
		data-modal-open="false"
		data-modal-state="closed"
	></div>
	if data.Message != "" {
		<div id="profile-flash" hx-swap-oob="true">
			@flashMessage(data.Message)
		</div>
	}
}

templ APIKeyUpdate(data APIKeyUpdateData) {
	if data.Security != nil {
		<div id="api-keys-card" hx-swap-oob="true">
			@apiKeysCard(data.Security, data.CSRFToken)
		</div>
	}
	if data.Secret != nil {
		<div
			id="modal"
			class="modal hidden"
			hx-swap-oob="true"
			aria-hidden="true"
			data-modal-open="false"
			data-modal-state="closed"
		>
			@APIKeySecretModal(data.Secret, data.Message)
		</div>
	} else {
		<div
			id="modal"
			class="modal hidden"
			hx-swap-oob="true"
			aria-hidden="true"
			data-modal-open="false"
			data-modal-state="closed"
		></div>
	}
	if data.Message != "" {
		<div id="profile-flash" hx-swap-oob="true">
			@flashMessage(data.Message)
		</div>
	}
}

templ SessionUpdate(data SessionUpdateData) {
	if data.Security != nil {
		<div id="sessions-card" hx-swap-oob="true">
			@sessionsCard(data.Security, data.CSRFToken)
		</div>
	}
	<div id="profile-flash" hx-swap-oob="true">
		@flashMessage(data.Message)
	</div>
}

func formatOptionalTime(t *time.Time) string {
	if t == nil {
		return "-"
	}
	return formatTimestamp(*t)
}
