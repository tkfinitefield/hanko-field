package orders

import (
    "strconv"

    "finitefield.org/hanko-admin/internal/admin/templates/helpers"
)

templ ExportJobsSection(data ExportJobsSectionData) {
    <section
        id="orders-export-wrapper"
        class={ helpers.ClassList("space-y-4", exportSectionClasses(data.Empty)) }
        data-orders-export
        if data.OOB {
            hx-swap-oob="outerHTML"
        }
    >
        <div class="flex items-center justify-between gap-3">
            <h2 class="text-sm font-semibold uppercase tracking-wide text-slate-500">エクスポート進捗</h2>
        </div>
        <div
            id="orders-export-jobs"
            class="space-y-3"
            data-orders-export-jobs
        >
            if len(data.Jobs) == 0 {
                <p class="text-sm text-slate-500">現在進行中のエクスポートはありません。</p>
            } else {
                for _, job := range data.Jobs {
                    @ExportJobCard(job)
                }
            }
        </div>
    </section>
}

func exportSectionClasses(empty bool) string {
    if empty {
        return "hidden"
    }
    return ""
}

templ ExportJobCard(data ExportJobCardData) {
    <article
        id={ data.DOMID }
        class="space-y-3 rounded-2xl border border-slate-200 bg-white p-4 shadow-sm"
        data-orders-export-job
        hx-target="this"
        hx-swap="outerHTML"
        if data.PollURL != "" {
            hx-get={ data.PollURL }
        }
        if data.PollTrigger != "" {
            hx-trigger={ data.PollTrigger }
        }
        aria-busy={ strconv.FormatBool(!data.Done) }
    >
        <div class="flex items-start justify-between gap-4">
            <div class="space-y-1">
                <p class="text-xs font-semibold uppercase tracking-wide text-slate-500">{ data.FormatLabel }</p>
                <p class="text-sm text-slate-600">ジョブID: { data.ID }</p>
                if data.SubmittedAt != "" {
                    <p class="text-xs text-slate-400">
                        開始: { data.SubmittedAt }
                        if data.SubmittedRelative != "" {
                            <span class="ml-1">({ data.SubmittedRelative })</span>
                        }
                    </p>
                }
            </div>
            <span class={ helpers.BadgeClass(data.StatusTone) }>{ data.StatusLabel }</span>
        </div>
        if data.Message != "" {
            <p class="text-sm text-slate-600">{ data.Message }</p>
        }
        <div class="space-y-2">
            <div class="flex items-center justify-between text-xs text-slate-500">
                <span>進捗</span>
                <span>{ data.CountsLabel }</span>
            </div>
            <div class="h-2 w-full overflow-hidden rounded-full bg-slate-200" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow={ strconv.Itoa(data.ProgressPercent) }>
                <div class="h-full bg-brand-500 transition-[width]" style={ "width: " + data.ProgressWidth }></div>
            </div>
        </div>
        if data.FieldsSummary != "" {
            <p class="text-xs text-slate-400">出力項目: { data.FieldsSummary }</p>
        }
        if data.HasDownload {
            <div class="flex justify-end">
                <a
                    href={ data.DownloadURL }
                    target="_blank"
                    rel="noreferrer"
                    class={ helpers.ButtonClass("secondary", "xs", false, false) }
                >
                    { data.DownloadLabel }
                </a>
            </div>
        }
    </article>
}
