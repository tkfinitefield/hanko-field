package search

import (
	"finitefield.org/hanko-admin/internal/admin/templates/components"
	"finitefield.org/hanko-admin/internal/admin/templates/layouts"
)

templ Index(data PageData) {
	@layouts.Base(data.Title, data.Breadcrumbs, pageBody(data))
}

templ pageBody(data PageData) {
	<div class="space-y-6" data-search-root>
		<section class="rounded-2xl bg-white px-6 py-6 shadow-sm ring-1 ring-slate-200">
			<div class="flex flex-col gap-4 lg:flex-row lg:items-start lg:justify-between">
				<div>
					<h1 class="text-2xl font-semibold text-slate-900">横断検索</h1>
					<p class="mt-2 text-sm text-slate-600">
						注文・ユーザー・レビューを横断して検索し、最適なアクションにつなげます。
					</p>
				</div>
				<div class="flex items-center gap-2">
					if data.AnalyticsBadge != "" {
						@components.Badge(data.AnalyticsBadge, data.AnalyticsTone)
					}
					<span class="text-xs text-slate-400">レスポンスタイム: { data.Summary.Duration }</span>
				</div>
			</div>
			<div class="mt-6 border-t border-slate-200 pt-4">
				@filterToolbar(data)
			</div>
		</section>

		<div class="grid gap-6 xl:grid-cols-[minmax(0,1fr)_320px]">
			<section class="space-y-4">
				<div
					id="global-search-results"
					data-search-results
					hx-target="this"
					hx-swap="innerHTML"
					class="space-y-4"
				>
					@Table(data.TableData)
				</div>
			</section>

			<aside
				class="hidden min-h-[320px] rounded-2xl border border-slate-200 bg-white p-6 shadow-sm xl:block"
				data-search-detail
			>
				<div data-search-detail-empty>
					<h2 class="text-lg font-semibold text-slate-900">プレビュー</h2>
					<p class="mt-2 text-sm text-slate-600">結果を選択すると、ここに概要と次のアクションが表示されます。</p>
				</div>
				<div class="hidden h-full flex-col" data-search-detail-content>
					<div class="flex items-start justify-between gap-3">
						<div>
							<p class="text-xs font-medium uppercase tracking-wide text-slate-500" data-search-detail-entity></p>
							<h2 class="text-lg font-semibold text-slate-900" data-search-detail-title></h2>
						</div>
						<span data-search-detail-badge></span>
					</div>
					<p class="mt-3 text-sm text-slate-600" data-search-detail-description></p>
					<dl class="mt-4 space-y-2 text-sm text-slate-600" data-search-detail-metadata></dl>
					<div class="mt-auto flex flex-wrap gap-3 pt-6">
						@components.ButtonWith("詳細を開く", components.ButtonOptions{
							Variant: "primary",
							Href:    "#",
							Attrs: templ.Attributes{
								"data-search-detail-open": "true",
							},
						})
						@components.ButtonWith("リンクをコピー", components.ButtonOptions{
							Variant: "secondary",
							Type:    "button",
							Attrs: templ.Attributes{
								"data-search-detail-copy": "true",
							},
						})
					</div>
				</div>
			</aside>
		</div>
	</div>
}

templ filterToolbar(data PageData) {
	<form
		id="global-search-form"
		data-search-form
		class="flex flex-col gap-4"
		hx-get={ data.TableEndpoint }
		hx-trigger="submit"
		hx-target="#global-search-results"
		hx-push-url="true"
		hx-indicator="#global-search-indicator"
	>
		<div class="flex flex-col gap-3 md:flex-row md:items-center">
			<div class="relative flex-1">
				<label class="sr-only" for="global-search-input">検索キーワード</label>
				<span class="pointer-events-none absolute inset-y-0 left-3 flex items-center text-slate-400">🔍</span>
				<input
					id="global-search-input"
					name="q"
					type="search"
					placeholder="顧客名、注文番号、レビュー内容で検索"
					value={ data.Query.Term }
					class="w-full rounded-lg border border-slate-300 bg-white py-2 pl-10 pr-4 text-sm text-slate-900 shadow-sm focus:border-brand-500 focus:outline-none focus:ring-2 focus:ring-brand-200"
					autocomplete="off"
					data-search-input
				/>
				<div id="global-search-indicator" class="htmx-indicator absolute right-3 top-1/2 -translate-y-1/2 text-xs text-slate-400">
					検索中…
				</div>
			</div>
			<div class="flex items-center gap-2 md:justify-end">
				@components.ButtonWith("検索", components.ButtonOptions{
					Type:    "submit",
					Variant: "primary",
				})
				@components.ButtonWith("クリア", components.ButtonOptions{
					Type:    "reset",
					Variant: "secondary",
					Attrs: templ.Attributes{
						"data-search-reset": "true",
					},
				})
			</div>
		</div>

		<div class="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between">
			<div class="flex flex-wrap gap-2" role="radiogroup" aria-label="検索対象">
				for _, option := range data.ScopeOptions {
					<label class={ scopeOptionClass(option.Value == data.Query.Scope) }>
						<input
							type="radio"
							name="scope"
							value={ option.Value }
							class="sr-only"
							checked?={ option.Value == data.Query.Scope }
							data-search-scope
						/>
						<span class="flex items-center gap-1 text-sm">
							if option.Icon != "" {
								<span aria-hidden="true">{ option.Icon }</span>
							}
							{ option.Label }
						</span>
					</label>
				}
			</div>
			<div class="flex flex-wrap gap-3">
				<div class="flex items-center gap-2">
					<label for="search-date-start" class="text-xs font-medium text-slate-500">期間</label>
					<input
						id="search-date-start"
						name="start"
						type="date"
						value={ data.Query.StartDate }
						class="w-36 rounded-lg border border-slate-300 px-3 py-1 text-sm text-slate-700 shadow-sm focus:border-brand-500 focus:outline-none focus:ring-2 focus:ring-brand-200"
					/>
					<span class="text-sm text-slate-500">〜</span>
					<input
						id="search-date-end"
						name="end"
						type="date"
						value={ data.Query.EndDate }
						class="w-36 rounded-lg border border-slate-300 px-3 py-1 text-sm text-slate-700 shadow-sm focus:border-brand-500 focus:outline-none focus:ring-2 focus:ring-brand-200"
					/>
				</div>
				<div class="flex items-center gap-2">
					<label for="search-persona" class="text-xs font-medium text-slate-500">担当</label>
					<select
						id="search-persona"
						name="persona"
						class="w-44 rounded-lg border border-slate-300 px-3 py-1.5 text-sm text-slate-700 shadow-sm focus:border-brand-500 focus:outline-none focus:ring-2 focus:ring-brand-200"
						data-search-filter="persona"
					>
						for _, option := range data.PersonaOptions {
							<option value={ option.Value } selected?={ option.Value == data.Query.Persona }>{ option.Label }</option>
						}
					</select>
				</div>
				<input type="hidden" name="limit" value="20" />
			</div>
		</div>
	</form>
}

func scopeOptionClass(active bool) string {
	base := "inline-flex items-center rounded-full border px-3 py-1.5 text-sm font-medium shadow-sm transition"
	if active {
		return base + " border-brand-500 bg-brand-50 text-brand-600"
	}
	return base + " border-slate-200 bg-slate-50 text-slate-600 hover:border-slate-300"
}
